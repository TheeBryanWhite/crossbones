#!/bin/bash -e

# Yes/No prompt function
ask() {
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        read -p "$1 [$prompt] " REPLY </dev/tty

        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

# Check that all required commands are available
CMDS="wp mysql curl git npm php"

for i in $CMDS
do
	type -P $i &>/dev/null  && continue  || { echo -e "\033[31mERROR: $i command not found. Installation cancelled. See the README.md file for installer requirements.\033[0m"; exit 1; }
done

# Check if wp-config already exists
if test -f "wp-config.php"; then echo -e "\033[31mERROR: The file wp-config.php exists in this directory. The installer can only be run on a fresh clone of WordPressBoilerplate.\033[0m";exit 1;
fi

# Let's begin...

clear

cat << "EOF"

EOF

echo
echo -e "\033[92m============ WordPress Installer ===========\033[0m"
echo

# Ask for local site URL
echo -n "Local site URL (example.dev): "
read HOSTNAME
while [[ -z "$HOSTNAME" ]]; do
	echo -n "Local site URL (example.dev): "
    read HOSTNAME
done

# Ask for theme directory name
echo -n "Theme directory name: "
read THEMEDIR
while [[ -z "$THEMEDIR" ]]; do
	echo -n "Theme directory name: "
    read THEMEDIR
done

# Ask for databse name
echo -n "Create database name: "
read DBNAME
while [[ -z "$DBNAME" ]]; do
	echo -n "Create database name: "
    read DBNAME
done

# Ask for databse user
echo -n "Your local database root username: "
read DBUSER
while [[ -z "$DBUSER" ]]; do
	echo -n "Your local database root username: "
    read DBUSER
done

# Ask for databse password
echo -n "Your local database root password: "
read DBPW
while [[ -z "$DBPW" ]]; do
	echo -n "Your local database root password: "
    read DBPW
done

# Ask for name of our website
echo -n "Site title: "
read SITETITLE
while [[ -z "$SITETITLE" ]]; do
	echo -n "Site title: "
    read SITETITLE
done

# Ask for administrator username
echo -n "Administrator username: "
read ADMINUSER
while [[ -z "$ADMINUSER" ]]; do
	echo -n "Administrator username: "
    read ADMINUSER
done

# Ask for editor username
echo -n "Editor username: "
read EDITORUSER
while [[ -z "$EDITORUSER" ]]; do
	echo -n "Editor username: "
    read EDITORUSER
done

# Ask for confirmation before we proceed
if ! ask "Ready to install. Do you want to continue?"; then
    exit 1;
fi

# Delete WordPressBoilerplate's README.md
rm -f README.md

# Generate random 24-character passwords
ADMINPW=$(LC_CTYPE=C tr -dc A-Za-z0-9_\!\@\#\$\%\^\&\*\(\)-+= < /dev/urandom | head -c 24)
EDITORPW=$(LC_CTYPE=C tr -dc A-Za-z0-9_\!\@\#\$\%\^\&\*\(\)-+= < /dev/urandom | head -c 24)

# Generate random 6-character table prefix
TABLEPREFIX=$(LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | head -c 6)"_"

# Download latest WordPress
wp core download

# Create wp-config.php
echo "Generating wp-config.php file..."
# wp core config --dbname=$DBNAME --dbuser=$DBUSER --dbpass=$DBPW --dbprefix=$TABLEPREFIX --extra-php <<PHP
wp config create --dbname=$DBNAME --dbuser=$DBUSER --dbpass=$DBPW --dbprefix=$TABLEPREFIX --extra-php <<PHP
/**
 * SECURITY AND PERFORMANCE
 */

// Disable backend file editor
define('DISALLOW_FILE_EDIT', true);

// Automatically empty trashes
define('EMPTY_TRASH_DAYS', 30);

// Restrict number of revisions kept
define('WP_POST_REVISIONS', 3);

/**
* Debugging (Development)
* NEVER LEAVE THESE ENABLED ON PRODUCTION!
*/
define('WP_DEBUG', true);
define('WP_DEBUG_LOG', true); // Enable Debug logging to the /wp-content/debug.log file
define('WP_DEBUG_DISPLAY', false); // Disable display of errors by WP
@ini_set('display_errors', 0); // Disable display of errors by PHP
// define('SAVEQUERIES', true); // Save Database Queries for later analysis
// define('SCRIPT_DEBUG', true); // Use non-minified core styles and scripts

/**
 * Debugging (Production)
 * Disables WP and PHP error reporting
 */
// define('WP_DEBUG', false);
// error_reporting(0);
// @ini_set(‘display_errors’, 0);
PHP

# Create database
echo "Creating database..."
wp db create

# Install WordPress
echo "Installing WordPress..."
wp core install --url="$HOSTNAME" --title="$SITETITLE" --admin_user="$ADMINUSER" --admin_password="$ADMINPW" --admin_email="bwhite@lauchlanx.com"

# Rename theme
echo "Setting up theme..."
mv wp-content/themes/projectname wp-content/themes/$THEMEDIR
sed -i '' "s/Project Name/$SITETITLE/g" wp-content/themes/$THEMEDIR/style.css
sed -i '' "s/Project Name/$SITETITLE/g" wp-content/themes/$THEMEDIR/assets/scss/main.scss

# Activate theme
echo "Activating theme..."
wp theme activate $THEMEDIR

echo "Creating editor user..."
wp user create $EDITORUSER editor@example.com --role=editor --user_pass=$EDITORPW --display_name=Editor

echo "Tidying up WordPress..."

# Delete dummy content
wp comment delete 1 --force
wp post delete 1 --force

# Remove core plugins and themes
wp plugin delete hello
wp plugin delete akismet
wp theme delete twentyfifteen
wp theme delete twentysixteen
wp theme delete twentyseventeen

echo "Setting up WordPress..."

# Set pretty permalinks
wp rewrite structure '/%postname%/' --hard

# Clear site description
wp option update blogdescription ""

# Set timezone
wp option update timezone_string America/New_York

# Start of week to Sunday
wp option update start_of_week 0

# Don't use emoji
wp option update use_smiles 0

# Don't ping services
wp option update ping_sites ""

# Set posts-per-page
wp option update posts_per_page 6

# For each article in RSS feed, show summary
wp option update rss_use_excerpt 1

# Tweak comment settings
wp option update default_pingback_flag ""
wp option update default_ping_status closed
wp option update default_comment_status closed
wp option update comment_registration 1
wp option update comments_notify ""
wp option update moderation_notify ""

# Set user defaults
wp user-meta update 1 nickname Administrator
wp user update 1 --display_name=Administrator
wp user-meta update 2 nickname Editor
wp user update 2 --display_name=Editor

# Create core style page and make it our home page
wp post update 2 --post_title="Core Style Guide"
wp post update 2 --post_name=core-style-guide
wp option update show_on_front page
wp option update page_on_front 2

# Get our style guide HTML from Sean's pen
# https://codepen.io/TheeBryanWhite/pen/VzKLJZ
curl -fs https://codepen.io/TheeBryanWhite/pen/VzKLJZ.html -o "corestyles.txt"
wp post update 2 corestyles.txt
rm -f corestyles.txt

# Activate all plugins
wp plugin activate --all

# Add hostname to Gulpfile 
echo "Setting up Gulp..."
sed -i '' "s/example.dev/$HOSTNAME/g" gulpfile.js
sed -i '' "s/ProjectName/$THEMEDIR/g" package.json

# Ask to create Bitbucket repo
if ask "Do you want to create a Bitbucket repository?"; then

    # Ask for Bitbucket repo name
    echo -n "New repository name: "
    read REPONAME
    while [[ -z "$REPONAME" ]]; do
    	echo -n "New repository name: "
        read REPONAME
    done

    # Ask for Bitbucket username
    echo -n "Your Bitbucket Username: "
    read BITBUCKETUSER
    while [[ -z "$BITBUCKETUSER" ]]; do
    	echo -n "Your Bitbucket Username: "
        read BITBUCKETUSER
    done
    
    # Ask for Bitbucket password
    echo -n "Your Bitbucket Password: "
    read BITBUCKETPASS
    while [[ -z "$BITBUCKETPASS" ]]; do
      echo -n "Your Bitbucket Password: "
        read BITBUCKETPASS
    done
    
    # Ask for Bitbucket Team Name
    echo -n "Your Bitbucket Team Name (as found in your team's Bitbucket URL): "
    read BITBUCKETTEAM
    while [[ -z "$BITBUCKETTEAM" ]]; do
      echo -n "Your Bitbucket Team Name (as found in your team's Bitbucket URL): "
        read BITBUCKETTEAM
    done
    
    # Create Bitbucket repo
    echo "Creating new Bitbucket repository..."
    curl -X POST -v -u $BITBUCKETUSER:$BITBUCKETPASS https://api.bitbucket.org/2.0/repositories/$BITBUCKETTEAM/$REPONAME -H "Content-Type: application/json" -d '{"is_private": true}'

    # Ask to create initial commit and push
    if ask "Do you want to create an initial commit and push?"; then
        echo "Creating initial commit..."
        git add .
        git commit -m "Inital commit" || true
        echo "Pushing to your new Bitbucket repository..."
        git push --set-upstream origin master || true
    fi

fi

# Ask to run npm install
if ask "Do you want to install Gulp dependencies?"; then
    echo "Installing Gulp dependencies..."
    sudo npm install || true
fi

# Open browser
open http://$HOSTNAME/wp-login.php

clear

echo -e "\033[92m==========================================="
echo -e " Site installation complete!\033[0m"
echo
echo " Admin username: $ADMINUSER"
echo " Admin password: $ADMINPW"
echo
echo " Editor username: $EDITORUSER"
echo " Editor password: $EDITORPW"
echo -e "\033[92m===========================================\033[0m"
echo -e "\033[31mYou can now delete this installer file.\033[0m"
